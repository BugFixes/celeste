---
AWSTemplateFormatVersion: 2010-09-09
Description: Celeste Service

Parameters:
  ServiceName:
    Type: String
    Default: celeste
  Environment:
    Type: String
    Default: local

  RDSName:
    Type: String
    Default: bugfixes
  RDSInstanceClass:
    Type: String
    Default: db.m3.medium
  RDSAllocatedStorage:
    Type: String
    Default: "50"
  RDSUsername:
    Type: String
    Default: database_username
    NoEcho: true
  RDSPassword:
    Type: String
    Default: database_password
    NoEcho: true
  RDSHostname:
    Type: String
    Default: localhost
    NoEcho: true
  RDSPort:
    Type: Number
    Default: "5432"
    NoEcho: true

  DatabaseAccounts:
    Type: String
    Default: accounts
  DatabaseAgents:
    Type: String
    Default: agents
  DatabaseLogs:
    Type: String
    Default: logs

  LogQueueName:
    Type: String
    Default: logs
  BugQueueName:
    Type: String
    Default: bugs
  CommsQueueName:
    Type: String
    Default: comms
  TicketQueueName:
    Type: String
    Default: tickets

  BuildBucket:
    Type: String
    Default: bugfixes-celeste-builds
  BuildKey:
    Type: String
    Default: celeste-local.zip

  GithubKey:
    Type: String
  GithubSecret:
    Type: String
  GithubAppId:
    Type: String
  GoogleKey:
    Type: String
  GoogleSecret:
    Type: String

  JWTSecret:
    Type: String

  DiscordAppId:
    Type: String
  DiscordPublicKey:
    Type: String
  DiscordClientId:
    Type: String
  DiscordClientSecret:
    Type: String
  DiscordBotToken:
    Type: String

  HostedZoneName:
    Type: String
    Default: dev.bugfix.ese

  Image:
    Type: String
    Default: ghcr.io/bugfixes/celeste:latest

Resources:
  ServiceARN:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'role'
          - !Ref Environment
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName:
            !Join
            - ''
            - - !Ref ServiceName
              - 'Lambda'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'sqs'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref BugQueue
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'sqs'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref LogQueue
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'sqs'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref TicketQueue
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'sqs'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref CommsQueue
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'sqs'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref BugQueueDeadLetter
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'sqs'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref LogQueueDeadLetter
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'sqs'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref TicketQueueDeadLetter
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'sqs'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref CommsQueueDeadLetter
              - Effect: Allow
                Action:
                  - dynamodb:UpdateTable
                  - dynamodb:DescribeTable
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'dynamodb'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref DatabaseAccounts
              - Effect: Allow
                Action:
                  - dynamodb:UpdateTable
                  - dynamodb:DescribeTable
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'dynamodb'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref DatabaseAgents
              - Effect: Allow
                Action:
                  - dynamodb:UpdateTable
                  - dynamodb:DescribeTable
                Resource:
                  !Join
                  - ':'
                  - - 'arn'
                    - 'aws'
                    - 'dynamodb'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref DatabaseLogs

  Logs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'logs'
          - !Ref Environment
      RetentionInDays: 90

  BugQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt BugQueueDeadLetter.Arn
        maxReceiveCount: 5
      QueueName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'BugQueue'
          - !Ref Environment
  LogQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt LogQueueDeadLetter.Arn
        maxReceiveCount: 5
      QueueName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'LogQueue'
          - !Ref Environment
  TicketQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt TicketQueueDeadLetter.Arn
        maxReceiveCount: 5
      QueueName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'TicketQueue'
          - !Ref Environment
  CommsQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt CommsQueueDeadLetter.Arn
        maxReceiveCount: 5
      QueueName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'CommsQueue'
          - !Ref Environment
  BugQueueDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'BugQueueDeadLetter'
          - !Ref Environment
  LogQueueDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'LogQueueDeadLetter'
          - !Ref Environment
  TicketQueueDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'TicketQueueDeadLetter'
          - !Ref Environment
  CommsQueueDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        !Join
        - '-'
        - - !Ref ServiceName
          - 'CommsQueueDeadLetter'
          - !Ref Environment

  DynamoAccounts:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref DatabaseAccounts
  DynamoAgents:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref DatabaseAgents
  DynamoLogs:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref DatabaseLogs

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Join
        - '-'
        - - !Ref ServiceName
          - !Ref RDSName
          - !Ref Environment
      DBName: !Ref RDSName
      DBInstanceClass: !Ref RDSInstanceClass
      AllocatedStorage: !Ref RDSAllocatedStorage
      Engine: postgres
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
  RDSPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSPassword
      SecretString: !Ref RDSPassword
  RDSUsernameSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSUsername
      SecretString: !Ref RDSUsername
  RDSPortSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSPort
      SecretString: !Ref RDSPort
  RDSHostnameSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSHostname
      SecretString: !Ref RDSHostname
  RDSDatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RDSDatabase
      SecretString: !Ref RDSName

  ProvidersGithubKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: github_key
      SecretString: !Ref GithubKey
  ProvidersGithubSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: github_secret
      SecretString: !Ref GithubSecret
  ProvidersGithubAppId:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: github_app_id
      SecretString: !Ref GithubAppId
  ProvidersGoogleKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: google_key
      SecretString: !Ref GoogleKey
  ProvidersGoogleSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: google_secret
      SecretString: !Ref GoogleSecret

  CommsDiscordApp:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: discord_app_id
      SecretString: !Ref DiscordAppId
  CommsDiscordKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: discord_public_key
      SecretString: !Ref DiscordPublicKey
  CommsDiscordClientId:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: discord_client_id
      SecretString: !Ref DiscordClientId
  CommsDiscordClientSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: discord_client_secret
      SecretString: !Ref DiscordClientSecret
  CommsDiscordBotToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: discord_bot_token
      SecretString: !Ref DiscordBotToken

  JWT:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: jwt_secret
      SecretString: !Ref JWTSecret

  DockerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: celeste
      RepositoryPolicyText:
        Version: 2012-10-17make
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principle:
              AWS: !Join
                - ':'
                - - 'arn'
                  - 'aws'
                  - 'iam'
                  - !Ref AWS::AccountId
                  - 'users/Keloran'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'

  CelesteLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - ''
        - - /ecs/
          - !Ref ServiceName
          - TaskDefinition
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: CelesteCluster
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: CelesteLogs
    Properties:
      Family: !Join
        - ''
        - - !Ref ServiceName
          - TaskDefinition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CelesteLogs
              awslogs-stream-prefix: ecs
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ServiceName
          - ExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principle:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam:aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ServiceName
          - TaskRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principle:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref ServiceName
          - AutoScalingRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principle:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam:aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join
        - ''
        - - !Ref ServiceName
          - ContainerSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join
        - ''
        - - !Ref ServiceName
          - LoadBalancerSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  ContainerService:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTPS
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerPort: 3000
          ContainerName: !Ref ServiceName
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /probe
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join
        - ''
        - - !Ref ServiceName
          - TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      TargetType: ip
      VpcId: !Ref VPC
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Join
        - ''
        - - !Ref ServiceName
          - LoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join
        - ''
        - - !Ref HostedZoneName
          - .
      Name: !Join
        - ''
        - - ''
          - .
          - !Ref HostedZoneName
          - .
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 2
      MaxCapacity: 2
      ResourceId: !Join
        - '/'
        - - service
          - !Ref Cluster
          - !GetAtt ContainerService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join
        - ''
        - - !Ref ServiceName
          - AutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 50
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Join
        - ''
        - - !Ref AWS::Region
          - a
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Join
        - ''
        - - !Ref AWS::Region
          - b
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: false
      EnableDnsHostnames: false
      InstanceTenancy: dedicated

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketName:
        !Join
        - '-'
        - - 'bugfixes'
          - !Ref ServiceName
          - !Ref Environment
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName: !Ref HostedZoneName

#  Gateway:
#    Type: AWS::ApiGateway::RestApi
#    Properties:
#      EndpointConfiguration:
#        Types:
#          - REGIONAL
#      Name:
#        !Join
#        - '-'
#        - - !Ref ServiceName
#          - 'Gateway'
#          - !Ref Environment
#  GatewayV1:
#    DependsOn:
#      - GatewayDeployment
#    Type: AWS::ApiGateway::Stage
#    Properties:
#      DeploymentId: !Ref GatewayDeployment
#      RestApiId: !Ref Gateway
#      StageName: 'v0'
#  GatewayDeployment:
#    Type: AWS::ApiGateway::Deployment
#    DependsOn:
#      - CreateAccount
#    Properties:
#      RestApiId: !Ref Gateway
#  GatewayEmptyModel:
#    Type: AWS::ApiGateway::Model
#    Properties:
#      ContentType: 'application/json'
#      RestApiId: !Ref Gateway
#      Schema: {}
#  CreateAccountResource:
#    DependsOn:
#      - GatewayEmptyModel
#      - CreateAccountRequestModel
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId:
#        !GetAtt
#        - Gateway
#        - RootResourceId
#      PathPart: 'account'
#      RestApiId: !Ref Gateway
#  CreateAccountRequestModel:
#    DependsOn:
#      - Gateway
#    Type: AWS::ApiGateway::Model
#    Properties:
#      ContentType: 'application/json'
#      RestApiId: !Ref Gateway
#      Schema:
#        $schema: 'http://json-schema.org/draft-04/schema#'
#        title: AccountCreate
#        type: object
#        properties:
#          name:
#            type: string
#          email:
#            type: string
#            format: email
#  CreateAccount:
#    DependsOn:
#      - CreateAccountResource
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: POST
#      Integration:
#        ConnectionType: INTERNET
#        IntegrationResponses:
#          - ResponseTemplates:
#              application/json: "{\"operation\":\"celeste_account_create\",\"data\":{\"key\":\"123e4567-e89b-12d3-a456-426614174000\",\"secret\":\"123e4567-e89b-12d3-a456-426614174000\"}}"
#            SelectionPattern: '2\d{2}'
#            StatusCode: '202'
#          - ResponseTemplates:
#              application/json: "{\"message\":\"Unknown Error\"}"
#            SelectionPattern: '5\d{2}'
#            StatusCode: '500'
#        PassthroughBehavior: WHEN_NO_TEMPLATES
#        RequestTemplates:
#          application/json: !Ref CreateAccountRequestModel
#        Type: MOCK
#        TimeoutInMillis: 29000
#      MethodResponses:
#        - ResponseModels:
#            application/json: !Ref GatewayEmptyModel
#          StatusCode: '202'
#        - ResponseModels:
#            application/json: !Ref GatewayEmptyModel
#          StatusCode: '500'
#      OperationName: 'create_account'
#      ResourceId: !Ref CreateAccountResource
#      RestApiId: !Ref Gateway


# RestApi -> Empty Model -> Create Account Resource -> Create Account Method -> Deployment -> stage
