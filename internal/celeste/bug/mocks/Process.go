// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	events "github.com/aws/aws-lambda-go/events"
	bug "github.com/bugfixes/celeste/internal/celeste/bug"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// Process is an autogenerated mock type for the Process type
type Process struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *Process) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Parse provides a mock function with given fields: request, logger
func (_m *Process) Parse(request events.APIGatewayProxyRequest, logger *zap.SugaredLogger) (bug.Response, error) {
	ret := _m.Called(request, logger)

	var r0 bug.Response
	if rf, ok := ret.Get(0).(func(events.APIGatewayProxyRequest, *zap.SugaredLogger) bug.Response); ok {
		r0 = rf(request, logger)
	} else {
		r0 = ret.Get(0).(bug.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(events.APIGatewayProxyRequest, *zap.SugaredLogger) error); ok {
		r1 = rf(request, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Report provides a mock function with given fields:
func (_m *Process) Report() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
