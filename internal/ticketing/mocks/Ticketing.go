// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	ticketing "github.com/bugfixes/celeste/internal/ticketing"
	mock "github.com/stretchr/testify/mock"
)

// Ticketing is an autogenerated mock type for the Ticketing type
type Ticketing struct {
	mock.Mock
}

// Connect provides a mock function with given fields: credentials
func (_m *Ticketing) Connect(credentials ticketing.Credentials) error {
	ret := _m.Called(credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(ticketing.Credentials) error); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields:
func (_m *Ticketing) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchCredentials provides a mock function with given fields:
func (_m *Ticketing) FetchCredentials() (ticketing.Credentials, error) {
	ret := _m.Called()

	var r0 ticketing.Credentials
	if rf, ok := ret.Get(0).(func() ticketing.Credentials); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ticketing.Credentials)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchStatus provides a mock function with given fields:
func (_m *Ticketing) FetchStatus() (ticketing.Status, error) {
	ret := _m.Called()

	var r0 ticketing.Status
	if rf, ok := ret.Get(0).(func() ticketing.Status); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ticketing.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTicket provides a mock function with given fields: hash
func (_m *Ticketing) FetchTicket(hash ticketing.Hash) (ticketing.TicketID, error) {
	ret := _m.Called(hash)

	var r0 ticketing.TicketID
	if rf, ok := ret.Get(0).(func(ticketing.Hash) ticketing.TicketID); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(ticketing.TicketID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ticketing.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields:
func (_m *Ticketing) Update() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
