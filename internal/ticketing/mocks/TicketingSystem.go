// Code generated by mockery 2.8.0. DO NOT EDIT.

package mocks

import (
	ticketing "github.com/bugfixes/celeste/internal/ticketing"
	mock "github.com/stretchr/testify/mock"
)

// TicketingSystem is an autogenerated mock type for the TicketingSystem type
type TicketingSystem struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *TicketingSystem) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *TicketingSystem) Create(_a0 *ticketing.Ticket) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ticketing.Ticket) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: _a0
func (_m *TicketingSystem) Fetch(_a0 *ticketing.Ticket) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ticketing.Ticket) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchRemoteTicket provides a mock function with given fields: _a0
func (_m *TicketingSystem) FetchRemoteTicket(_a0 interface{}) (ticketing.Ticket, error) {
	ret := _m.Called(_a0)

	var r0 ticketing.Ticket
	if rf, ok := ret.Get(0).(func(interface{}) ticketing.Ticket); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ticketing.Ticket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTemplate provides a mock function with given fields: _a0
func (_m *TicketingSystem) GenerateTemplate(_a0 *ticketing.Ticket) (ticketing.TicketTemplate, error) {
	ret := _m.Called(_a0)

	var r0 ticketing.TicketTemplate
	if rf, ok := ret.Get(0).(func(*ticketing.Ticket) ticketing.TicketTemplate); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ticketing.TicketTemplate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ticketing.Ticket) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseCredentials provides a mock function with given fields: _a0
func (_m *TicketingSystem) ParseCredentials(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TicketExists provides a mock function with given fields: _a0
func (_m *TicketingSystem) TicketExists(_a0 *ticketing.Ticket) (bool, ticketing.TicketDetails, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*ticketing.Ticket) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 ticketing.TicketDetails
	if rf, ok := ret.Get(1).(func(*ticketing.Ticket) ticketing.TicketDetails); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(ticketing.TicketDetails)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*ticketing.Ticket) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: _a0
func (_m *TicketingSystem) Update(_a0 *ticketing.Ticket) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ticketing.Ticket) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
